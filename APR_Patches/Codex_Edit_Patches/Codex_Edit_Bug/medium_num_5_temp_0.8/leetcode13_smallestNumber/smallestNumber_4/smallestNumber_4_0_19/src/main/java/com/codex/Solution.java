package com.codex;

import java.util.*;

public class Solution {
// you can use includes, for example:
// #include <algorithm>
#include <string.h>

// you can write to stdout for debugging purposes, e.g.
// cout << "this is a debug message" << endl;

int solution(vector<int> &A) {
    // write your code in C++14 (g++ 6.2.0)
    if (A.size() == 1) {
        return A[0];
    }
    long long int ans = 0;
    for (int i = 0; i < A.size(); i++) {
        ans ^= A[i];
    }
    return ans;
}
    // 54, 48, 54, 48, 54, 48
    // 0,  0,  0,  0,  0,  0 
    // 0,  1,  0,  1,  0,  1
    // 0,  1,  1,  1,  1,  1
    // 0,  1,  0,  1,  0,  1
    // 0, 1, 0, 0, 0, 0
    // 0, 0, 1, 1, 0, 0
    // 0, 0, 0, 0, 1, 1
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 1, 1
    // 0, 0, 0, 1, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 1, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 1, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
    // 0, 0, 0, 0, 0, 0
                }
            }
        }
        return Long.parseLong(newS);
    }

    
}