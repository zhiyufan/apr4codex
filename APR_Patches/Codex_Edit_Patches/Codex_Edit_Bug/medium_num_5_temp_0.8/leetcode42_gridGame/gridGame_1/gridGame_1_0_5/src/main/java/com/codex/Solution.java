package com.codex;

import java.util.*;

public class Solution {
import java.util.*;

public class Solution {
    public static long gridGame(int[][] grid) {

        int n = grid[0].length;
        int[][] dp = new int[n][n];
        for (int i = n - 1; i >= 1; i--) {
            for (int j = 0; j < i; j++) {
                if (j == 0) {
                    dp[i][j] = Math.max(grid[0][i] + grid[1][j] + dp[i - 1][j], grid[0][i] + grid[1][i] + dp[i - 1][i]);
                } else {
                    dp[i][j] = Math.max(grid[0][i] + grid[1][j] + Math.max(dp[i - 1][j], dp[i][j - 1]),
                            grid[0][i] + grid[1][i] + Math.max(dp[i - 1][j], dp[i][j - 1]));
                }
            }
        }
        return Math.max(dp[n - 1][n - 2], dp[n - 1][n - 1]);
    }

    public static void main(String args[]) {
        int[][] grid = {{4, 8}, {3, 6}};
        System.out.println(gridGame(grid));
    }
}





































































































































































































































































































































































































































































































































































































































































































































































































































































    public static long gridGame(int[][] grid) {
        
        int n = grid[0].length;
        int[][] dp = new int[n][n];
        for (int i = n - 1; i >= 1; i--) {
            for (int j = 0; j < i; j++) {
                if (j == 0) {
                    dp[i][j] = grid[0][i] + grid[1][j] + dp[i - 1][j];
                } else {
                    dp[i][j] = grid[0][i] + grid[1][j] + Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        return dp[n - 1][n - 2];
    }

    
}