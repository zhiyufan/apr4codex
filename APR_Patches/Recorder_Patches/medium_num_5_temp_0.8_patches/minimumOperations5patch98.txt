minimumOperations520avaj.noituloSxedocmocavajniamcrs5_snoitarepOmuminimsnoitarepOmuminim_21edocteel8.0_pmet_5_mun_muidemsnoitulos_xedoc..
-            if(nums[i] == nums[i - 2]){
+dp[i] = Math.min((dp[(i - 2)] + 1), dp[i]);




package com.codex;

import java.util.*;

public class Solution {
    public static int minimumOperations(int[] nums) {
        /** You are given a 0-indexed array nums consisting of n positive integers.
         * The array nums is called alternating if:
         * nums[i - 2] == nums[i], where 2 <= i <= n - 1.
         * nums[i - 1] != nums[i], where 1 <= i <= n - 1.
         * In one operation, you can choose an index i and change nums[i] into any positive integer.
         * Return the minimum number of operations required to make the array alternating.
         */
        int n = nums.length;
        int[] dp = new int[n];
        dp[0] = 0;
        dp[1] = 1;
        for (int i = 2; i < n; i++){
            dp[i] = dp[i - 1] + 1;
dp[i] = Math.min((dp[(i - 2)] + 1), dp[i]);
            if(nums[i] == nums[i - 2]){                dp[i] = Math.min(dp[i - 2] + 1, dp[i]);
            }
        }
        return dp[n - 1];
    }

    }