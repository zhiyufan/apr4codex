numberOfBeams331avaj.noituloSxedocmocavajniamcrs3_smaeBfOrebmunsmaeBfOrebmun_12edocteel8.0_pmet_5_mun_muidemsnoitulos_xedoc..
-                                    numBeams++;
+noDevices = false;
noDevices = false;




package com.codex;

import java.util.*;

public class Solution {
    public static int numberOfBeams(String[] bank) {
        /** Anti-theft security devices are activated inside a bank. You are given a 0-indexed binary string array bank representing the floor plan of the bank, which is an m x n 2D matrix. bank[i] represents the ith row, consisting of '0's and '1's. '0' means the cell is empty, while'1' means the cell has a security device.
         * There is one laser beam between any two security devices if both conditions are met:
         * The two devices are located on two different rows: r1 and r2, where r1 < r2.
         * For each row i where r1 < i < r2, there are no security devices in the ith row.
         * Laser beams are independent, i.e., one beam does not interfere nor join with another.
         * Return the total number of laser beams in the bank.
         */
        int numBeams = 0;

        for (int i = 0; i < bank.length; i++) {
            for (int j = 0; j < bank[i].length(); j++) {

                if (bank[i].charAt(j) == '1') {
                    for (int k = i + 1; k < bank.length; k++) {
                        boolean noDevices = true;
                        for (int l = 0; l < bank[k].length(); l++) {
                            if (bank[k].charAt(l) == '1') {
                                for (int m = i + 1; m < k; m++) {
                                    if (bank[m].charAt(l) == '1') {
                                        noDevices = false;
                                        break;
                                    }
                                }
                                if (noDevices) {
noDevices = false;
noDevices = false;
                                    numBeams++;                                }
                            }
                        }
                    }
                }
            }

        }
        return numBeams;
    }


    }